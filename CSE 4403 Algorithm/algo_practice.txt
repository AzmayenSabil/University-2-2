>>> BFS (queue)

after adding vertices and edges, 

bfs(start_node){
	
	visited[] = false (to keep track of the visited nodes)
	queue[] (to push and pop nodes)

	visited[start_node] = true
	queue.push(start_node)

	while(queue is not empty){
		s = queue.pop()
		print(s)

		for(i = loop through all adjacent nodes of s){
			if(not visited[i]){
				visited[i] = true
				queue.push(i)
			}
		}
	}	
}




>>> DFS (stack)

after adding vertices and edges,

visited[] = false (to keep track of the visited nodes)

dfs(start_node){
		
	visited[start_node] = true
	print(start_node)

	for(i = loop through all adjacent nodes of start_node){
		if(not visited[i]){
			DFS(i)
		}
	}	

}



>>> Topological Sort 

<if there is a cycle, there cannot be a topological order>

int n; // number of vertices
vector<vector<int>> adj; // adjacency list of graph
vector<bool> visited;
vector<int> ans;

void dfs(int v) {
    visited[v] = true;
    for (int u : adj[v]) {
        if (!visited[u])
            dfs(u);
    }
    ans.push_back(v);
}

void topological_sort() {
    visited.assign(n, false);
    ans.clear();
    for (int i = 0; i < n; ++i) {
        if (!visited[i])
            dfs(i);
    }
    reverse(ans.begin(), ans.end());
}



>>> Insertion Sort 

void insertionSort(int arr[], int n)
{
    int i, key, j;
    for (i = 1; i < n; i++)
    {
        key = arr[i];
        j = i - 1;

        while (j >= 0 && arr[j] > key)
        {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
}



>>> Heap Sort

first we heapify the array from (n/2-1) to 0

then we swap the 1st element with nth element and
then heapify again

void heapify(int arr[], int n, int i)
{
	int largest = i;
	int l = 2 * i + 1; // left = 2*i + 1
	int r = 2 * i + 2; // right = 2*i + 2

	if (l < n && arr[l] > arr[largest])
		largest = l;
	if (r < n && arr[r] > arr[largest])
		largest = r;

	if (largest != i) {
		swap(arr[i], arr[largest]);
		heapify(arr, n, largest);
	}
}

void heapSort(int arr[], int n)
{
	for (int i = n / 2 - 1; i >= 0; i--)
		heapify(arr, n, i);

	for (int i = n - 1; i > 0; i--) {
		swap(arr[0], arr[i]);
		heapify(arr, i, 0);
	}
}


>>> Merge Sort

void merge(int array[], int const left, int const mid, int const right)
{
	auto const subArrayOne = mid - left + 1;
	auto const subArrayTwo = right - mid;

	auto *leftArray = new int[subArrayOne],
		*rightArray = new int[subArrayTwo];

	for (auto i = 0; i < subArrayOne; i++)
		leftArray[i] = array[left + i];
	for (auto j = 0; j < subArrayTwo; j++)
		rightArray[j] = array[mid + 1 + j];

	auto indexOfSubArrayOne = 0, 
		indexOfSubArrayTwo = 0; 
	int indexOfMergedArray = left;

	while (indexOfSubArrayOne < subArrayOne && indexOfSubArrayTwo < subArrayTwo) {
		if (leftArray[indexOfSubArrayOne] <= rightArray[indexOfSubArrayTwo]) {
			array[indexOfMergedArray] = leftArray[indexOfSubArrayOne];
			indexOfSubArrayOne++;
		}
		else {
			array[indexOfMergedArray] = rightArray[indexOfSubArrayTwo];
			indexOfSubArrayTwo++;
		}
		indexOfMergedArray++;
	}

	while (indexOfSubArrayOne < subArrayOne) {
		array[indexOfMergedArray] = leftArray[indexOfSubArrayOne];
		indexOfSubArrayOne++;
		indexOfMergedArray++;
	}

	while (indexOfSubArrayTwo < subArrayTwo) {
		array[indexOfMergedArray] = rightArray[indexOfSubArrayTwo];
		indexOfSubArrayTwo++;
		indexOfMergedArray++;
	}
}

void mergeSort(int array[], int const begin, int const end)
{
	if (begin >= end)
		return;

	auto mid = begin + (end - begin) / 2;
	mergeSort(array, begin, mid);
	mergeSort(array, mid + 1, end);
	merge(array, begin, mid, end);
}



>>> Quick Sort

int partition (int arr[], int low, int high)
{
	int pivot = arr[high];
	int i = (low - 1);

	for (int j = low; j <= high - 1; j++)
	{
		if (arr[j] < pivot)
		{
			i++;
			swap(arr[i], arr[j]);
		}
	}
	swap(arr[i + 1], arr[high]);
	return (i + 1);
}

void quickSort(int arr[], int low, int high)
{
	if (low < high)
	{
		int pi = partition(arr, low, high);

		quickSort(arr, low, pi - 1);
		quickSort(arr, pi + 1, high);
	}
}


>>> Dijkstra Algorithm

dist, par <-- array
visited <-- might use this also

void dijkstra(int src)
{
    for(int i = 0;i < 100005; i++)
    {
        dist[i] = inf;
        par[i] =  -1;
    }

    priority_queue<data>Q;

    dist[src] = 0;
    Q.push({src,0});

    while(!Q.empty())
    {
        int u = Q.top().v;
        Q.pop();


        for(int i=0;i<adj[u].size();i++)
        {
            int v = adj[u][i].first;
            int w = adj[u][i].second; 

            if(dist[u] + w < dist[v])
            {
                dist[v] = dist[u] + w;
                par[v] = u; //1
                Q.push({v,dist[v]});

            }
        }
    }


}



>>> Floyd Warshall Algorithm

	for (k = 0; k < V; k++) {
		for (i = 0; i < V; i++) {
			for (j = 0; j < V; j++) {
				if (dist[i][j] > (dist[i][k] + dist[k][j])
					&& (dist[k][j] != INF
						&& dist[i][k] != INF))
					
					dist[i][j] = dist[i][k] + dist[k][j];
			
			}
		}
	}


>>> Strongly Connected Component

see code 


----------------------------

DYNAMIC PROGRAMMING

LCS -> https://www.geeksforgeeks.org/longest-common-subsequence-dp-4/
	-> https://www.programiz.com/dsa/longest-common-subsequence/

LIS -> https://www.geeksforgeeks.org/longest-increasing-subsequence-dp-3/

FIBO -> see code
FACT -> see code

COIN CHANGE 			-> https://www.geeksforgeeks.org/coin-change-dp-7/
			(minimum)	-> https://www.educative.io/edpresso/minimum-coin-change-in-cpp---a-dynamic-programming-question

0/1 KNAPSACK -> https://www.geeksforgeeks.org/0-1-knapsack-problem-dp-10/